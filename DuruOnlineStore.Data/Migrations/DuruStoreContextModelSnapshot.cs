// <auto-generated />
using System;
using DuruOnlineStore.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DuruOnlineStore.Data.Migrations
{
    [DbContext(typeof(DuruStoreContext))]
    partial class DuruStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Makyaj"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Cilt Bakımı"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Saç Bakımı"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Kişisel Bakım"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Sağlık ve Hijyen"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Parfüm ve Deodorant"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Anne ve Bebek"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Erkek Bakımı"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Ev ve Yaşam"
                        });
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Identities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "10",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = "20",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Identities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ImageName = "loreal-paris-telescopic-mascara.jpg",
                            Name = "Loreal Paris Telescopic Maskara - Siyah",
                            Price = 260.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ImageName = "flormar-fondoten-perfect-coverage.jpg",
                            Name = "Flormar Fondöten - Perfect Coverage Foundation No: 101 Pastelle",
                            Price = 229.90m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ImageName = "maybelline-new-york-ruj-color-sensatio.jpg",
                            Name = "Maybelline New York Ruj - Color Sensational Creamy Matte Nudes 987 Smoky Rose",
                            Price = 215.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ImageName = "loreal-paris-light-from-paradise.jpg",
                            Name = "Loreal Paris Light From Paradise Icoconic Glow Aydınlatıcı Pudra - 01 Coconut Addict",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ImageName = "neutrogena-goz-makyaj-temizleyicisi.jpg",
                            Name = "Neutrogena Deep Clean Göz Makyaj Temizleyicisi 125 ml",
                            Price = 134.90m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ImageName = "neutrogena-ultra-nourishing.jpg",
                            Name = "Neutrogena Ultra Nourishing Besleyici Bakım Kremi 300 ml",
                            Price = 142.90m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            ImageName = "nivea-nemlendirici-yuz-maskesi-hydra.jpg",
                            Name = "Nivea Nemlendirici Yüz Maskesi - Hydra Skin Effect",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            ImageName = "arkoarko-nem-krem-250-ml-ekstra-nemel.jpg",
                            Name = "Arko Nem Krem Ekstra Nem Temel Bakım Serisi 250 ml",
                            Price = 64.90m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            ImageName = "nivea-sun-koruma-ve-nem-spf-50-faktor.jpg",
                            Name = "Nivea Sun Sprey Güneş Kremi Koruma Ve Nem +Spf50 200 ml",
                            Price = 447.90m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            ImageName = "neutrogena-siyah-nokta-karsiti-gunluk.jpg",
                            Name = "Neutrogena Siyah Nokta Karşıtı Günlük Peeling Jel 150 ml",
                            Price = 99.90m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            ImageName = "koleston-kit-sac-boyasi-30-koyu-kahve.jpg",
                            Name = "Koleston Kit Saç Boyası 3/0 Koyu Kahve",
                            Price = 166.00m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            ImageName = "palette-kit-sac-boyasi-10.1-kullu-sari.jpg",
                            Name = "Palette Delux Kit Saç Boyası 10.1 Küllü Açık Sarı",
                            Price = 79.00m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            ImageName = "bioblas-forte-bitkisel-serum-sac-dokul.jpg",
                            Name = "Bioblas Forte Bitkisel Serum - Saç Dökülmesine Karşı Etkili 100 ml",
                            Price = 79.90m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            ImageName = "dove-sampuan-uzun-saclar-600-mlsampuan.jpg",
                            Name = "Dove Şampuan Uzun Saç Terapisi 600 ml",
                            Price = 89.90m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            ImageName = "gliss-sivi-sac-bakim-kremi-ultimate-oil.jpg",
                            Name = "Gliss Sıvı Saç Bakım Kremi Ultimate Oil Elixir 200 ml",
                            Price = 114.00m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            ImageName = "duru-dus-jeli-450-ml-moods-deniz-miner.jpg",
                            Name = "Duru Moods Duş Jeli Deniz Minerali & Aloe Vera Özlü 450 ml",
                            Price = 55.00m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            ImageName = "sensodyn-ferah-nefes-dis-macunu-75-ml.jpg",
                            Name = "Sensodyn Ferah Nefes Diş Macunu 75 ml",
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            ImageName = "colgate-plax-nane-agiz-bakim-suyu-500.jpg",
                            Name = "Colgate Plax Nane Ağız Bakım Suyu 500 ml",
                            Price = 104.90m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            ImageName = "misip-kurdanli-dis-ipi-50-adet.jpg",
                            Name = "Misip Kürdanlı Diş İpi Silindir Kutu 50li",
                            Price = 39.90m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            ImageName = "lionesse-2li-tirnak-makasi-seti-5106.jpg",
                            Name = "Lionesse 2li Tırnak Makası Seti 5106",
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            ImageName = "kotex-active-hijyenik-ped-ultra-extra.jpg",
                            Name = "Kotex Active Hijyenik Ped Ultra Extra Normal 8li",
                            Price = 49.00m
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            ImageName = "orkid-gunluk-ped-gunluk-koruma-dev-eko.jpg",
                            Name = "Orkid Günlük Ped Günlük Koruma Dev Ekonomi Paketi 48li",
                            Price = 125.00m
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            ImageName = "durex-prezervatif-yok-otesi-ekstra-ser.jpg",
                            Name = "Durex Prezervatif Yok Ötesi Ekstra İnce 10lu",
                            Price = 189.90m
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 5,
                            ImageName = "duru-sprey-limon-kolonyasi-150-ml.jpg",
                            Name = "Duru Sprey Limon Kolonyası 150 ml",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            ImageName = "le-petit-marseillais-sivi-sabun-lavanta.jpg",
                            Name = "Le Petit Marseillais Sıvı Sabun Lavanta Özlü 300 ml",
                            Price = 84.90m
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 6,
                            ImageName = "ninovaparfum-ve-deodorantlar.jpg",
                            Name = "Ninova Women VIII Parfüm Edp 100 ml",
                            Price = 379.50m
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 6,
                            ImageName = "emotion-romance-kadin-parfumu-edt-50-m.jpg",
                            Name = "Emotion Romance Kadın Parfümü Edt 50 ml",
                            Price = 249.00m
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 6,
                            ImageName = "nivea-kadin-deodorant-pearl-beauty-150.jpg",
                            Name = "Nivea Kadın Deodorant - Pearl & Beauty 150 ml",
                            Price = 115.00m
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 6,
                            ImageName = "axe-erkek-deodorant-dark-temptation.jpg",
                            Name = "Axe Erkek Deodorant Dark Temptation 150 ml",
                            Price = 113.50m
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 6,
                            ImageName = "bon-veno-100-ml-150-ml-deo-for-men-giff.jpg",
                            Name = "Bon Veno For Men Giff Oud Kofre/Parfüm Seti 100 ml + Deodorant 150 ml",
                            Price = 229.90m
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 7,
                            ImageName = "dalin-bebek-bakim-yagi-500-ml.jpg",
                            Name = "Dalin Bebek Bakım Yağı 500 ml",
                            Price = 139.50m
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 7,
                            ImageName = "johnsons-baby-bebek-sampuani-pompali.jpg",
                            Name = "Johnsons Baby Bebek Şampuanı Pompalı 750 ml",
                            Price = 89.00m
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 7,
                            ImageName = "dalin-islak-mendil-64lubebek.jpg",
                            Name = "Dalin Islak Mendil 64lü",
                            Price = 39.90m
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 7,
                            ImageName = "johnsons-baby-bedtime-vucut-yagi-300.jpg",
                            Name = "Johnsons Baby Bedtime Vücut Yağı 300 ml",
                            Price = 89.00m
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 7,
                            ImageName = "sebamed-baby-bebek-kremi-extra-yumusak.jpg",
                            Name = "Sebamed Baby Bebek Kremi Extra Yumuşak 200 ml",
                            Price = 289.90m
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 8,
                            ImageName = "arko-tiras-kopugu-cool-200-ml.jpg",
                            Name = "Arko Tıraş Köpüğü Cool 200 ml",
                            Price = 80.00m
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 8,
                            ImageName = "veet-men-dusta-tuy-dokucu-krem-150-ml.jpg",
                            Name = "Veet Men Duşta Tüy Dökücü Krem 150 ml",
                            Price = 199.90m
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 8,
                            ImageName = "gillette-blue-3-tffkullan-at-tiras-bic.jpg",
                            Name = "Gillette Blue 3 Kullan At Tıraş Bıçağı 6lı",
                            Price = 194.00m
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 8,
                            ImageName = "nivea-sport-erkekler-icin-sac-yuz-vuc.jpg",
                            Name = "Nivea Sport Erkekler İçin Saç & Yüz & Vücut Jeli 500 ml",
                            Price = 124.90m
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 8,
                            ImageName = "nivea-men-tiras-losyonu-deep-dimension.jpg",
                            Name = "Nivea Men Tıraş Losyonu - Deep Dimension Comfort 100 ml",
                            Price = 195.00m
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 9,
                            ImageName = "kokulu-tealight-mum-18li.jpg",
                            Name = "Kokulu Tealight Mum",
                            Price = 119.90m
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 9,
                            ImageName = "lionessse-seyahat-seti.jpg",
                            Name = "Lionessse Seyahat Seti 7912",
                            Price = 168.00m
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 9,
                            ImageName = "bardak-mum-tekli-kutulu.jpg",
                            Name = "Bardak Mum Tekli Kutulu",
                            Price = 100.00m
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 9,
                            ImageName = "silindir-mum-40x60-parlak-kirmizi-4lu.jpg",
                            Name = "Silindir Mum 40X60 Parlak Kırmızı",
                            Price = 99.90m
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 9,
                            ImageName = "tealight-mum-yesil-50li.jpg",
                            Name = "Tealight Mum Yeşil",
                            Price = 139.90m
                        });
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.BasketItem", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DuruOnlineStore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Product", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Campaign", "Campaign")
                        .WithMany("Pruducts")
                        .HasForeignKey("CampaignId");

                    b.HasOne("DuruOnlineStore.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Identities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Identities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DuruOnlineStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DuruOnlineStore.Data.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Campaign", b =>
                {
                    b.Navigation("Pruducts");
                });

            modelBuilder.Entity("DuruOnlineStore.Data.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
